package com.example.handson;



import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import com.google.gson.Gson;


@Controller    // This means that this class is a Controller
 // This means URL's start with /demo (after Application path)
public class MyController {
	
	Medical m;
	Drugs d;
	MedicalDrug md;
	String json="";
	
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private MedicalRepository medicalrepository;
	
	@Autowired
	private DrugsRepository drugsrepository;
	
	@Autowired
	private MedicalDrugRepository medicaldrugrepository;
	

	
	/*@RequestMapping(path="/demo/medicalview",method=RequestMethod.GET)
	public String medicalview() {
	return "medicalview";
}*/

	/*@RequestMapping(path="/demo/drugsview",method=RequestMethod.GET)
	public String drugsview() {
	return "drugsview";
}*/
	
	 @RequestMapping(value="/demo/deletemedical")
	 @ResponseBody
	  public String deletemedical(@RequestParam("empid") String empid,Model model) {
		json="";
		Long employid=Long.valueOf(empid);
	    
	    try {
	      m = medicalrepository.findByempid(employid);
	      medicalrepository.delete(m);
	      md=medicaldrugrepository.findByempid(employid);
	      
	      model.addAttribute("message","Representative details have been deleted");
	    }
	    catch (Exception ex) {
	    	model.addAttribute("message","No such representative is present");
	    }
	    
	    
	    json=createjson(model);
	      return json;
	 }
	
	 @RequestMapping(value="/demo/medicaldata")
	 @ResponseBody
	  public String medicalview(@RequestParam("empid") String empid,Model model) {
		json="";
		Long employid=Long.valueOf(empid);
	    String empfirstname="";
	    String emplastname="";
	    String compid="";
	    String address="";
	    String country="";
	    String state="";
	    String city="";
	    String pincode="";
	   
	    Set<String> values=new HashSet<String>();
	    
	    try {
	    List<MedicalDrug> a1=medicaldrugrepository.findAll();
	      m = medicalrepository.findByempid(employid);
	      empfirstname =m.getRepfirstname();
	      model.addAttribute("empfirstname",empfirstname);
	      emplastname=m.getReplastname();  
	      model.addAttribute("emplastname",emplastname);
	      compid=m.getCompid(); 
	      model.addAttribute("compid",compid);
	      address=m.getRepaddress(); 
	      model.addAttribute("address",address);
	      country=m.getCountry(); 
	      model.addAttribute("country",country);
	      pincode=m.getPincode();
	      model.addAttribute(" pincode", pincode);
	      state=m.getState();
	      model.addAttribute("state", state);
	      city=m.getCity();
	      model.addAttribute("city", city);
	      for(MedicalDrug a2:a1)
			 {
				 if(a2.getEmpid()==employid)
				 {
					 values.add(a2.getDrugid().toString());
				 }
				 else
				 { 
					 values.add(a2.getDrugid().toString());}
					// values.add("Not present");}
			 }
	      model.addAttribute("values",values);
	      model.addAttribute("message","Check the retrieved values");
	    }
	    catch (Exception ex) {
	    	model.addAttribute("message","No such representative is present");
	    }
	    
	    
	    json=createjson(model);
	      return json;
	 }
	    
	    @RequestMapping(value="/demo/createmedical")
		 @ResponseBody
		  public String createmedical(@RequestParam("empid")String empid, @RequestParam("fname")String repfirstname, @RequestParam("lname")String replastname, @RequestParam("compid")String compid, @RequestParam("address")String repaddress,
				  @RequestParam("country")String country, @RequestParam("state")String state, @RequestParam("city")String city, @RequestParam("pincode")String pincode,Model model) 
	    
	    {
			json="";
			Long employid=Long.valueOf(empid);
		    
		    try {
		      m = medicalrepository.findByempid(employid);
		      m.setRepfirstname(repfirstname);
		      m.setReplastname(replastname);
		      m.setCompid(compid);
		      m.setRepaddress(repaddress);
		      m.setCountry(country);
		      m.setState(state);
		      m.setCity(city);
		      m.setPincode(pincode);
		      model.addAttribute("message", "The employee id details have been successfully updated");
		      
		    }
		    catch (Exception ex) {
		    	
		    	  m=new Medical(employid,repfirstname,replastname,compid,repaddress,country,state,city,pincode);
			      medicalrepository.save(m);
			      model.addAttribute("message","Entry made successfully for employee id="+empid);
		    }

	      
		
	      
	      json=createjson(model);
	      return json;
	  }
	
	 @RequestMapping(value="/demo/drugsdetail")
	 @ResponseBody
	  public String drugsdetail(@RequestParam("drugid") String drugid,Model model) {
		json="";
		Long drugsid=Long.valueOf(drugid);
		String drugname="";
	    String description="";
	    String about="";
	    String symptoms="";
	    String molecule="";
	    String product="";
	    try {
	      d = drugsrepository.findBydrugid(drugsid);
	      drugname=d.getDrugname();
	      model.addAttribute("drugname", drugname);
	      description=d.getDescription();
	      model.addAttribute("description", description);
	      about=d.getAbout();
	      model.addAttribute("about", about);
	      symptoms=d.getSymptoms();
	      model.addAttribute("symptoms", symptoms);
	      molecule=d.getMoleculename();
	      model.addAttribute("molecule", molecule);
	      product=d.getProductcode();
	      model.addAttribute("product", product);
	    }
	    catch (Exception ex) {

	    }
	      json=createjson(model);
	      return json;
	  }
	
	 @RequestMapping(value="/demo/createdrug")
	 @ResponseBody
	  public String createdrug(@RequestParam("drugid")String drugid, @RequestParam("drugname")String drugname, @RequestParam("description")String description, @RequestParam("about")String about, @RequestParam("symptoms")String symptoms,
			  @RequestParam("molecule")String molecule, @RequestParam("product")String product,Model model) 
    
    {
		json="";
		Long drugsid=Long.valueOf(drugid);
	    
	    try {
	      d = drugsrepository.findBydrugid(drugsid);
	      d.setDrugname(drugname);
	      d.setAbout(about);
	      d.setDescription(description);
	      d.setMoleculename(molecule);
	      d.setSymptoms(symptoms);
	      d.setProductcode(product);
	      model.addAttribute("message", "The drug id details have been successfully updated");
	      
	    }
	    catch (Exception ex) {
	    	
	    	  d=new Drugs(drugsid,drugname,description,about,symptoms,molecule,product);
		      drugsrepository.save(d);
		      model.addAttribute("message","Entry made successfully for drug id="+drugid);
	    }

      
      
      json=createjson(model);
      return json;
  }
	 @RequestMapping(value="/demo/createmedicaldrug")
	 @ResponseBody
	  public String createmedicaldrug(@RequestParam("empid")String empid, @RequestParam("drugid")String drugid,Model model)
			  {
		       json="";
			   Long drugsid=Long.valueOf(drugid);
			   Long employid=Long.valueOf(empid);

			   try
			   {
				   md=new MedicalDrug(drugsid,employid);
				   medicaldrugrepository.save(md);
			   }
			   
			   catch(Exception e)
			   {
				   
			   }
			      model.addAttribute("message","Drugs have been asigned to the representataive");
				  json=createjson(model);
			      return json;
			  }
		 @RequestMapping(path="/demo/getallmedical",method=RequestMethod.GET)
		 public String viewtrans(Model model) {
			 
		  json="";
		  List<Medical> allmedical=medicalrepository.findAll();
		  model.addAttribute("allmedical",allmedical);
		  json=createjson(model);
	      return json;
		 }
	  
 
	  public String createjson(Model model) 
	  {
		  try
	      {
	    	  Gson gson = new Gson();
	    	  json = gson.toJson(model);
	      }
	      catch(Exception e)
	      {}
	      return json;
		  
	  }
	  
}
